package org.webrtc.kite.tests;

import io.cosmosoftware.kite.exception.KiteTestException;
import io.cosmosoftware.kite.report.AllureStepReport;
import io.cosmosoftware.kite.report.AllureTestReport;
import io.cosmosoftware.kite.report.Reporter;
import io.cosmosoftware.kite.report.Status;
import io.cosmosoftware.kite.util.TestUtils;

import javax.json.JsonObject;
import javax.json.JsonValue;
import java.io.File;
import java.util.List;

import static io.cosmosoftware.kite.entities.Timeouts.ONE_SECOND_INTERVAL;
import static io.cosmosoftware.kite.entities.Timeouts.TEN_SECOND_INTERVAL;
import static io.cosmosoftware.kite.util.ReportUtils.getStackTrace;
import static io.cosmosoftware.kite.util.TestUtils.waitAround;

public class JsTestRunner extends TestRunner {
  // todo set WORKING_DIR
  private final String WORKING_DIR = "js/";
  private final String jsTestImpl;
  private int numberOfParticipant;
  private String reportPath;
  
  public JsTestRunner(AllureTestReport testReport, String jsTestImpl, int id) {
    super(null, testReport, id);
    this.jsTestImpl = jsTestImpl;
  }
  
  public void setNumberOfParticipant(int numberOfParticipant) {
    this.numberOfParticipant = numberOfParticipant;
  }
  
  public void setReportPath(String reportPath) {
    this.reportPath = "./" + reportPath;
  }
  
  @Override
  public Object call() {
    // todo: run the js test with a unique id (self-generated)
    // todo: test completion check (by file existence maybe)
    // todo: retrieve result from file and create allure report
    // todo: NOTE: result from JS does not need to be in Allure report format (yet)
    String resultPath = WORKING_DIR + this.reportPath + "/" + id + "/result.json";
    try {
      List<String> command = java.util.Arrays.asList("node", jsTestImpl, "" + numberOfParticipant, "" + id,  reportPath);
      logger.info("Executing command: " + "node " + jsTestImpl + " " + numberOfParticipant +  " " + id + " " +  reportPath);
      TestUtils.executeCommand(WORKING_DIR, command, logger, jsTestImpl + "_" + id);
      waitForResultFile(resultPath);
      //processResult(readJsonFile(resultPath));
    } catch (Exception e) {
      logger.error(getStackTrace(e));
    }
    return null;
  }
  
  private void waitForResultFile(String filePath) throws KiteTestException {
    for (int wait = 0; wait < TEN_SECOND_INTERVAL; wait += ONE_SECOND_INTERVAL) {
      File resultFile = new File(filePath);
      if (resultFile.exists()) {
        return;
      }
      waitAround(ONE_SECOND_INTERVAL);
    }
    throw new KiteTestException("Could not find result file generated by Js", Status.FAILED);
  }
  
  private AllureStepReport processResult(JsonObject result) throws KiteTestException {
    if (result != null) {
      AllureStepReport stepReport = new AllureStepReport(result.getString("name", "place holder"));
      stepReport.setStatus(Status.valueOf(result.getString("status")));
      stepReport.setStartTimestamp((long) result.getInt("start"));
      stepReport.setStopTimestamp((long) result.getInt("stop"));
      if (result.get("attachment") != null) {
        JsonObject attachmentObj = result.getJsonObject("attachment");
        String type =attachmentObj.getString("type", "plain");
        if (!type.equals("png"))
        Reporter.getInstance().textAttachment(stepReport, "attachment", attachmentObj.getJsonObject("value").toString(), type);
      }
      for (JsonValue value : result.getJsonArray("steps")) {
        JsonObject stepObject = (JsonObject) value;
        stepReport.addStepReport(processResult(stepObject));
      }
      return stepReport;
    }
    throw new KiteTestException("There's a null value in the report", Status.BROKEN);
  }
}
